- Work with Git Bash
ls - show location 
cd /c/Users - go to the directory
git remote -v  = show remote connection
git status - show files and changes in git
git log - show log of chances
git dl <File>
git add <File>
git commit -m "text inf
git push - push updates to server

- Pull changes from remote 
git pull - get files updates server

- Git Gui - interface program for git
git gui& - run programm 
gitk& - run history of chages

- Inside .git
Three fundametnal object types: commit, tree, blob(binary larg obj)
Commit contain link -> previos Commit contains -> Tree (contain name of the file and blob contant) 

Every commit can contain files that were changed. Commit basically refferences the trees.
Trees - name of files that were commiting as well as name of directories that store them
blob - content of the file

git show -s --pretty=raw 63b9b  - show details about commit
git ls-tree b92f6  - show details about tree
git show 612179 - type firs symbols of tree and get essential replica of blob file

- Undoing changes
-- working deirectory
git checkout -- <File>  - rollback single file
git checkout .  - rollback all files from the current and bellow directory it's immutable back after
git clean -xdf delete all previos new created files

-- staging area (when file in index level, after "git add <file>" command)
git reset -- <file> - rollback changes after command add (after can use "git checkout -- <file>")

-- local branch (when commit done in local branch)
git reset HEAD^^ (HEAD~2) - delet the commit
git commit --amend - m "text"  - add some changes to commit after commit

-- remote ropository
git revert <sha1> - instead of deleting it's undoing changes and create new reverted commit
 > Press "Insert" on left bottom, add the text to update info, 
press Esc, text "wq" (write and quit) or q! (not change and exit)

- Git reset
git reset -- soft  HEAD~1 - return from by 1 commit to index stage
git reset -- mixed HEAD^  - return last commit to file system stage
git reser -- hard - delete all from commited stage (immutable)

- Git .gitignore (to display changes only in specific files
*.log - any file file.log to bi hidden
!error.log - hide all file.log but open error.log
/TODO - ignore only files in the current direcnory, not in subdir/TODO
build/ - ignore all file in the build/ directory
doc/*.txt - ignore doc/notes.txt, but not doc/server/another.txt
doc/**/*.pdf - ignore all .pdf files in the doc/ directory

- Branching and marge
git checkout -b feauture - switched to create a new breach 'feauture'
git chockour main - switch to main branch
git merge feauture - to unite "current" branch with "feauture"
git branch --all - show all branch

- Conflict solving
git merge --abort  -  rollback all changes to last one
git chackout --Xours or Xtheirs  - telling to left my version or lastone
git diff - resolve manually  (better use grahical interface)
git revert 09fe472 instead of deleting it's undoing changes and create new reverted commit
git merge --continue 
user merge tool

- Rebase
- Cherry pick (coppi commit to front of other, has a same sh1 code)

- Teg short text to mark a commit create and use after pushing a commit
git tag version1 - mark commit with tag
git checkout version1 - checkout it
git tag -list - view tags
git push --tags - push to remote

-Stashing (special location to temporary store info that still not committed)
git stash save "description" - save working directory
git stash list - view stashes we have
sit stash apply stash@{0} - bring back and leave in stash
git stash pop - bring back and remove from stash
git stash drop - clear 

- Remotes
git remote -v - to see whic server we working with
git remote remove origion - to delete actual remotestor 

if lose github account to restore git project
git add origion git@github.com:remix2903/git-beckup.git - add new remote, git push, and
shift+insert to coppy offered command by bash (git push --set-upstream origion master)

-Branching strategy
Centralized stategy - work in single branch no create other
Feauture-branch workflow - create additional feauture branch, then merge it together
Gitflow 
	- develop in develo branch, add feauthure in feature branch then merge
	- store production cod in master, and developing in other branch
	- store in master with tag, develop in develop brang, fix in hotfix branch then marge
Integration manager workflow
	developer1 and developer2 take info from blassed repo, send owm code to de1public and de2public, 
	integration manager collect and check info and send to blessed repository
Dictator and Lieutenant workflow
	developers get code from blassed repo, lieutenants from developers, dictator from lieutenants 
	and push to blessed repo
Forking workflow(fork - coppy of repository)
	original developer give permission to coppy fork add commits to it then pull forks from developers 
	and push to original repo if he want
	


Editing 







